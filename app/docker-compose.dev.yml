services:

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "${FRONTEND_PORT:-5173}:5173"
    volumes:
      - ./frontend:/app
      - ./infra/vault/agent/env/:/app/env:rw
      - /app/node_modules
    environment:
      - VITE_API_URL=${API_URL}
      - VITE_APP_NAME=${VITE_APP_NAME}
    networks:
      - backend
    depends_on:
      - backend

  backend:
    build:
      context: ./backend
      dockerfile: ./docker/dockerfile
    container_name: backend
    ports:
      - "3001:${BACKEND_PORT:-3000}"
    environment:
      - API_URL=${API_URL}
    restart: unless-stopped
    networks:
      - backend
    volumes:
      - ./backend/data:/app/data
      - ./infra/vault/agent/env/:/app/env:rw


  vault-server:
    build:
      context: ./infra/vault/server
      dockerfile: dockerfile
    container_name: vault-server
    ports:
      - "8200:8200/tcp"
    cap_add:
      - IPC_LOCK
    volumes:
      # Commenté les montages problématiques pour faciliter le build
      - ./infra/vault/server/config:/vault/config:ro  # Config files as read-only
      # - ./infra/vault/server/file:/vault/file:rw     # Commenté car pose problème
      - ./infra/vault/server/logs:/vault/logs:rw      # Mount logs directory
      - ./infra/vault/server/tokens/:/vault/tokens:rw # Store tokens in a named volume
    restart: unless-stopped


  vault-agent:
    build:
      context: ./infra/vault/agent
      dockerfile: dockerfile
    container_name: vault-agent
    ports:
      - "8201:8200"
    depends_on:
      - vault-server
    volumes:
      - ./infra/vault/agent/config:/vault/config:ro   # Config files as read-only
      - ./infra/vault/agent/env/:/vault/env:rw                 # Write .env to a named volume
      - ./infra/vault/agent/logs:/vault/logs:rw       # Mount logs directory
      - ./infra/vault/server/tokens/:/vault/tokens:rw           # Read tokens from shared volume

    restart: unless-stopped


volumes:
  vault-data: {}  # Volume nommé pour vault

networks:
  backend:
    driver: bridge

