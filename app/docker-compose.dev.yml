services:

  frontend:
    build:
      context: ./core/frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "${FRONTEND_PORT:-5173}:5173"
    volumes:
      - ./core/frontend:/app
      - ./infra/vault/agent/env/:/app/env:rw
      - /app/node_modules
    networks:
      - backend
    depends_on:
      - backend

  backend:
    build:
      context: ./core/backend
      dockerfile: ./docker/dockerfile
    container_name: backend
    ports:
      - "3001:${BACKEND_PORT:-3000}"
    restart: unless-stopped
    networks:
      - backend
    volumes:
      - ./core/backend/data:/app/data
      - ./infra/vault/agent/env/:/app/env:rw


  vault-server:
    build:
      context: ./infra/vault/server
      dockerfile: dockerfile
    container_name: vault-server
    ports:
      - "8200:8200/tcp"
    cap_add:
      - IPC_LOCK
    volumes:
      - ./infra/vault/server/config:/vault/config:ro    # Config files as read-only
      - ./infra/vault/server/file:/vault/file:rw        # To check if causes issues
      - ./infra/vault/server/logs:/vault/logs:rw        # Mount logs directory
      - ./infra/vault/server/tokens/:/vault/tokens:rw   # Store tokens in a named volume
    restart: unless-stopped


  vault-agent:
    build:
      context: ./infra/vault/agent
      dockerfile: dockerfile
    container_name: vault-agent
    ports:
      - "8201:8200"
    depends_on:
      - vault-server
    volumes:
      - ./infra/vault/agent/config:/vault/config:ro     # Config files as read-only
      - ./infra/vault/agent/env/:/vault/env:rw          # Write .env to a named volume
      - ./infra/vault/agent/logs:/vault/logs:rw         # Mount logs directory
      - ./infra/vault/server/tokens/:/vault/tokens:rw   # Read tokens from shared volume

    restart: unless-stopped


volumes:
  vault-data: {}  # Volume nomm√© pour vault

networks:
  backend:
    driver: bridge
