services:

  backend:
    build:
      context: ./backend
      dockerfile: ./docker/dockerfile
    container_name: backend
    ports:
      - "3000:3000"
    restart: unless-stopped
    networks:
      - backend
    volumes:
      - sqlite-data:/app/data
      - env-file:/app/.env:ro  # Use a named volume instead of bind mount
      # - ./vault/agent/.env:/app/.env:ro


  vault-server:
    build:
      context: ./vault/server
      dockerfile: dockerfile
    container_name: vault-server
    ports:
      - "8200:8200/tcp"
    cap_add:
      - IPC_LOCK
    volumes:
      # - ./vault/server:/vault/:rw

      - ./vault/server/config:/vault/config:ro  # Config files as read-only
      - ./vault/server/file:/vault/file:rw      # Only mount the storage directory
      - ./vault/server/logs:/vault/logs:rw      # Mount logs directory
      - ./vault/server/tokens/:/vault/tokens:rw           # Store tokens in a named volume
    restart: unless-stopped


  vault-agent:
    build:
      context: ./vault/agent
      dockerfile: dockerfile
    container_name: vault-agent
    ports:
      - "8201:8200"
    depends_on:
      - vault-server
    volumes:
      # - ./vault/agent:/vault/:rw
      # - ./vault/server/role_id:/vault/role_id:rw
      # - ./vault/server/secret_id:/vault/secret_id:rw

      - ./vault/agent/config:/vault/config:ro   # Config files as read-only
      - ./vault/agent/env-template.tmpl:/vault/env-template.tmpl:ro
      - ./vault/agent/logs:/vault/logs:rw       # Mount logs directory
      - ./vault/server/tokens/:/vault/tokens:rw           # Read tokens from shared volume
      - env-file:/vault/.env:rw                 # Write .env to a named volume

    restart: unless-stopped


volumes:
  sqlite-data:
  env-file: # generated .env by vault agent, to access in backend
  # vault-tokens: # shared volume between server and agent
    

networks:
  backend:
    driver: bridge

