/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/ts/websocket.ts":
/*!*****************************!*\
  !*** ./src/ts/websocket.ts ***!
  \*****************************/
/***/ (() => {

eval("\n// WebSocket URL configuration\nconst WS_URL = 'http://localhost:3000';\nclass WebSocketService {\n    constructor() {\n        this.socket = null;\n        this.listeners = new Map();\n        this.reconnectTimer = null;\n        this.reconnectAttempts = 0;\n        this.maxReconnectAttempts = 3; // Réduit à 3 tentatives\n        this.reconnectDelay = 3000; // 3 seconds initial delay\n        this.isBackendAvailable = true; // Flag pour suivre la disponibilité du backend\n    }\n    // Connect to the WebSocket server\n    connect() {\n        var _a;\n        if (((_a = this.socket) === null || _a === void 0 ? void 0 : _a.readyState) === WebSocket.OPEN) {\n            console.log('[WebSocket] Already connected');\n            return;\n        }\n        // Si le backend a été marqué comme indisponible, ne pas tenter de se reconnecter\n        if (!this.isBackendAvailable) {\n            console.log('[WebSocket] Backend previously marked as unavailable, skipping connection attempt');\n            return;\n        }\n        const token = localStorage.getItem('auth_token');\n        if (!token) {\n            console.log('[WebSocket] No token available for connection');\n            return;\n        }\n        try {\n            // Close any existing connection\n            this.disconnect();\n            // Create a new connection with the token\n            this.socket = new WebSocket(`${WS_URL.replace('http', 'ws')}/ws?token=${token}`);\n            // Connection opened\n            this.socket.addEventListener('open', () => {\n                console.log('[WebSocket] Connected successfully');\n                this.reconnectAttempts = 0;\n                this.isBackendAvailable = true; // Marquer le backend comme disponible\n                if (this.reconnectTimer) {\n                    clearTimeout(this.reconnectTimer);\n                    this.reconnectTimer = null;\n                }\n                // Register all existing event listeners\n                this.reattachListeners();\n            });\n            // Listen for messages\n            this.socket.addEventListener('message', (event) => {\n                var _a;\n                try {\n                    const data = JSON.parse(event.data);\n                    const eventType = data.type;\n                    if (eventType && this.listeners.has(eventType)) {\n                        (_a = this.listeners.get(eventType)) === null || _a === void 0 ? void 0 : _a.forEach(callback => {\n                            callback(data);\n                        });\n                    }\n                }\n                catch (error) {\n                    console.error('[WebSocket] Error parsing message:', error);\n                }\n            });\n            // Connection closed (attempt reconnect)\n            this.socket.addEventListener('close', (event) => {\n                console.log(`[WebSocket] Connection closed: ${event.code} ${event.reason}`);\n                this.attemptReconnect();\n            });\n            // Connection error\n            this.socket.addEventListener('error', (error) => {\n                console.warn('[WebSocket] Connection error - Backend may not be running WebSocket server');\n                this.attemptReconnect();\n            });\n        }\n        catch (error) {\n            console.error('[WebSocket] Setup error:', error);\n            this.attemptReconnect();\n        }\n    }\n    // Disconnect from the WebSocket server\n    disconnect() {\n        if (this.socket) {\n            this.socket.close();\n            this.socket = null;\n        }\n        if (this.reconnectTimer) {\n            clearTimeout(this.reconnectTimer);\n            this.reconnectTimer = null;\n        }\n        this.reconnectAttempts = 0;\n    }\n    // Subscribe to an event\n    on(event, callback) {\n        var _a, _b;\n        if (!this.listeners.has(event)) {\n            this.listeners.set(event, new Set());\n        }\n        (_a = this.listeners.get(event)) === null || _a === void 0 ? void 0 : _a.add(callback);\n        // If socket is open, send a subscription message\n        if (((_b = this.socket) === null || _b === void 0 ? void 0 : _b.readyState) === WebSocket.OPEN) {\n            this.socket.send(JSON.stringify({ action: 'subscribe', event }));\n        }\n    }\n    // Unsubscribe from an event\n    off(event, callback) {\n        var _a, _b, _c;\n        (_a = this.listeners.get(event)) === null || _a === void 0 ? void 0 : _a.delete(callback);\n        // If no more listeners for this event, send unsubscribe message\n        if (((_b = this.listeners.get(event)) === null || _b === void 0 ? void 0 : _b.size) === 0 && ((_c = this.socket) === null || _c === void 0 ? void 0 : _c.readyState) === WebSocket.OPEN) {\n            this.socket.send(JSON.stringify({ action: 'unsubscribe', event }));\n        }\n    }\n    // Send a message to the server\n    send(type, data) {\n        var _a;\n        if (((_a = this.socket) === null || _a === void 0 ? void 0 : _a.readyState) !== WebSocket.OPEN) {\n            console.warn('[WebSocket] Cannot send message: connection not open');\n            return;\n        }\n        this.socket.send(JSON.stringify(Object.assign({ type }, data)));\n    }\n    // Reattach all event listeners after reconnect\n    reattachListeners() {\n        var _a;\n        if (((_a = this.socket) === null || _a === void 0 ? void 0 : _a.readyState) !== WebSocket.OPEN)\n            return;\n        this.listeners.forEach((_, event) => {\n            var _a;\n            (_a = this.socket) === null || _a === void 0 ? void 0 : _a.send(JSON.stringify({ action: 'subscribe', event }));\n        });\n    }\n    // Attempt to reconnect with exponential backoff\n    attemptReconnect() {\n        if (this.reconnectTimer)\n            return;\n        this.reconnectAttempts++;\n        if (this.reconnectAttempts > this.maxReconnectAttempts) {\n            console.log('[WebSocket] Max reconnect attempts reached, giving up');\n            this.isBackendAvailable = false; // Marquer le backend comme indisponible\n            return;\n        }\n        const delay = Math.min(10000, this.reconnectDelay * Math.pow(1.5, this.reconnectAttempts - 1));\n        console.log(`[WebSocket] Attempting to reconnect in ${delay}ms (attempt ${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\n        this.reconnectTimer = window.setTimeout(() => {\n            this.reconnectTimer = null;\n            this.connect();\n        }, delay);\n    }\n}\n// Create a singleton instance\nconst websocketService = new WebSocketService();\n// Make it globally available\nwindow.websocketService = websocketService;\n// Auto-connect if user is authenticated\ndocument.addEventListener('DOMContentLoaded', () => {\n    const token = localStorage.getItem('auth_token');\n    if (token) {\n        console.log('[WebSocket] Auto-connecting...');\n        websocketService.connect();\n    }\n});\n\n\n//# sourceURL=webpack://ft-transcendence-frontend/./src/ts/websocket.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/ts/websocket.ts"]();
/******/ 	
/******/ })()
;