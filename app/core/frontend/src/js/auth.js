/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/ts/auth.ts":
/*!************************!*\
  !*** ./src/ts/auth.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthService: () => (/* binding */ AuthService),\n/* harmony export */   authService: () => (/* binding */ authService)\n/* harmony export */ });\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n// Constants\nconst TOKEN_KEY = 'auth_token';\nconst USER_ID_KEY = 'user_id';\nconst USERNAME_KEY = 'username';\nconst REMEMBER_ME_KEY = 'remember_me';\nconst TOKEN_EXPIRY_KEY = 'token_expiry';\n// Default token expiry time (24 hours)\nconst DEFAULT_TOKEN_EXPIRY = 24 * 60 * 60 * 1000; // 24 hours in milliseconds\nclass AuthService {\n    constructor() {\n        this.refreshTimeout = null;\n        // Initialize auth state from localStorage\n        this.state = {\n            isAuthenticated: false,\n            token: null,\n            userId: null,\n            username: null,\n            rememberMe: localStorage.getItem(REMEMBER_ME_KEY) === 'true',\n            expiresAt: null\n        };\n        // Try to restore session on initialization\n        this.restoreSession();\n    }\n    /**\n     * Initialize auth service and restore session if available\n     */\n    init() {\n        // Add event listeners for token refresh\n        window.addEventListener('focus', () => this.checkTokenValidity());\n        // Schedule token refresh if user is authenticated\n        if (this.state.isAuthenticated && this.state.expiresAt) {\n            this.scheduleTokenRefresh();\n        }\n    }\n    /**\n     * Login user and store authentication data\n     */\n    login(email, password, rememberMe) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                console.log('Auth: Attempting login for:', email);\n                // Get global API instance\n                const api = window.api;\n                if (!api || !api.auth) {\n                    console.error('API not initialized');\n                    return false;\n                }\n                const response = yield api.auth.login(email, password);\n                console.log('Auth: Login response:', response);\n                if (response.success && response.data) {\n                    console.log('Auth: Login successful, setting auth state');\n                    // Set auth state\n                    this.setAuthState(response.data, rememberMe);\n                    return true;\n                }\n                console.log('Auth: Login failed:', response.message || 'Unknown error');\n                return false;\n            }\n            catch (error) {\n                console.error('Login error:', error);\n                return false;\n            }\n        });\n    }\n    /**\n     * Register new user\n     */\n    register(username, email, password) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                // Get global API instance\n                const api = window.api;\n                if (!api || !api.auth) {\n                    console.error('API not initialized');\n                    return false;\n                }\n                const response = yield api.auth.register(username, email, password);\n                if (response.success && response.data) {\n                    // Set auth state (automatically logged in after registration)\n                    this.setAuthState(response.data, false);\n                    return true;\n                }\n                return false;\n            }\n            catch (error) {\n                console.error('Registration error:', error);\n                return false;\n            }\n        });\n    }\n    /**\n     * Logout user and clear session data\n     */\n    logout() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                // Get global API instance\n                const api = window.api;\n                if (api && api.auth) {\n                    // Call logout API endpoint\n                    yield api.auth.logout();\n                }\n            }\n            catch (error) {\n                console.error('Logout error:', error);\n            }\n            finally {\n                // Clear session data even if API call fails\n                this.clearSession();\n            }\n        });\n    }\n    /**\n     * Check if user is authenticated\n     */\n    isAuthenticated() {\n        console.log('Auth: Checking authentication status');\n        // Check if internal state says we're authenticated\n        if (this.state.isAuthenticated && this.state.token) {\n            console.log('Auth: State has authenticated=true and token is present');\n            // Check if token is expired\n            if (this.state.expiresAt && this.state.expiresAt > Date.now()) {\n                console.log('Auth: Token is valid, user is authenticated');\n                return true;\n            }\n            else {\n                console.log('Auth: Token is expired, clearing session');\n                this.clearSession();\n                return false;\n            }\n        }\n        // If internal state says we're not authenticated, check if we have a token in storage\n        const token = localStorage.getItem(TOKEN_KEY) || sessionStorage.getItem(TOKEN_KEY);\n        console.log('Auth: Token in storage:', !!token);\n        if (token) {\n            // Check for user ID in storage\n            const userId = localStorage.getItem(USER_ID_KEY) || sessionStorage.getItem(USER_ID_KEY);\n            console.log('Auth: User ID in storage:', !!userId);\n            if (userId) {\n                console.log('Auth: Found token and userID in storage, restoring session');\n                // If we found token and userID but they weren't loaded in state, restore session\n                this.restoreSession();\n                // Return the authentication state after restoration\n                return this.state.isAuthenticated;\n            }\n        }\n        console.log('Auth: No valid auth data found, user is not authenticated');\n        return false;\n    }\n    /**\n     * Get current auth token\n     */\n    getToken() {\n        return this.state.token;\n    }\n    /**\n     * Get current user ID\n     */\n    getUserId() {\n        return this.state.userId;\n    }\n    /**\n     * Get current username\n     */\n    getUsername() {\n        return this.state.username;\n    }\n    /**\n     * Update username in auth state\n     */\n    updateUsername(username) {\n        if (!username)\n            return;\n        // Update state\n        this.state.username = username;\n        // Update in storage\n        if (this.state.rememberMe) {\n            localStorage.setItem(USERNAME_KEY, username);\n        }\n        else {\n            sessionStorage.setItem(USERNAME_KEY, username);\n        }\n        console.log('Auth: Username updated to:', username);\n    }\n    /**\n     * Clear session data (exposed for API module)\n     */\n    clearSession() {\n        // Clear state\n        this.state = {\n            isAuthenticated: false,\n            token: null,\n            userId: null,\n            username: null,\n            rememberMe: this.state.rememberMe,\n            expiresAt: null\n        };\n        // Clear localStorage and sessionStorage\n        localStorage.removeItem(TOKEN_KEY);\n        localStorage.removeItem(USER_ID_KEY);\n        localStorage.removeItem(USERNAME_KEY);\n        localStorage.removeItem(TOKEN_EXPIRY_KEY);\n        sessionStorage.removeItem(TOKEN_KEY);\n        sessionStorage.removeItem(USER_ID_KEY);\n        sessionStorage.removeItem(USERNAME_KEY);\n        sessionStorage.removeItem(TOKEN_EXPIRY_KEY);\n        // Clear any pending token refresh\n        if (this.refreshTimeout !== null) {\n            window.clearTimeout(this.refreshTimeout);\n            this.refreshTimeout = null;\n        }\n        console.log('Auth: Session cleared');\n    }\n    /**\n     * Restore session from localStorage or sessionStorage\n     * Made public to allow external components to force a session restore\n     */\n    restoreSession() {\n        console.log('Auth: Attempting to restore session');\n        // Try to get token from localStorage first, then sessionStorage\n        const token = localStorage.getItem(TOKEN_KEY) || sessionStorage.getItem(TOKEN_KEY);\n        if (!token) {\n            console.log('Auth: No token found in storage');\n            return;\n        }\n        // Get user ID and other data\n        const userId = localStorage.getItem(USER_ID_KEY) || sessionStorage.getItem(USER_ID_KEY);\n        const username = localStorage.getItem(USERNAME_KEY) || sessionStorage.getItem(USERNAME_KEY);\n        const rememberMe = localStorage.getItem(REMEMBER_ME_KEY) === 'true';\n        // Get token expiry\n        const expiryStr = localStorage.getItem(TOKEN_EXPIRY_KEY) || sessionStorage.getItem(TOKEN_EXPIRY_KEY);\n        const expiresAt = expiryStr ? parseInt(expiryStr, 10) : null;\n        console.log('Auth: Found token data in storage', {\n            hasToken: !!token,\n            hasUserId: !!userId,\n            hasUsername: !!username,\n            expiresAt: expiresAt ? new Date(expiresAt).toISOString() : null\n        });\n        // Check if we have all required data and token is not expired\n        if (token && userId && (expiresAt === null || expiresAt > Date.now())) {\n            // Update state\n            this.state = {\n                isAuthenticated: true,\n                token,\n                userId,\n                username,\n                rememberMe,\n                expiresAt\n            };\n            console.log('Auth: Session restored successfully. User is authenticated.');\n            // Schedule token refresh if we have an expiry\n            if (expiresAt) {\n                this.scheduleTokenRefresh();\n            }\n        }\n        else {\n            console.log('Auth: Session restoration failed - invalid or expired token');\n            this.clearSession(); // Clean up any invalid data\n        }\n    }\n    /**\n     * Set authentication state from login/register response\n     */\n    setAuthState(authData, rememberMe) {\n        console.log('Auth: Setting auth state with data:', {\n            id: authData.id,\n            username: authData.username,\n            tokenPresent: !!authData.token,\n            rememberMe\n        });\n        // Calculate token expiry time\n        const expiresAt = Date.now() + DEFAULT_TOKEN_EXPIRY;\n        console.log('Auth: Token will expire at:', new Date(expiresAt).toLocaleString());\n        // Update state\n        this.state = {\n            isAuthenticated: true,\n            token: authData.token,\n            userId: authData.id.toString(),\n            username: authData.username,\n            rememberMe,\n            expiresAt\n        };\n        // Store in localStorage or sessionStorage based on rememberMe\n        this.persistSession();\n        // Schedule token refresh\n        this.scheduleTokenRefresh();\n        // Verify the data was stored correctly\n        console.log('Auth: Session data persisted, state is now:', {\n            isAuthenticated: this.state.isAuthenticated,\n            username: this.state.username,\n            rememberMe: this.state.rememberMe\n        });\n    }\n    /**\n     * Persist session data in storage\n     */\n    persistSession() {\n        var _a;\n        console.log('Auth: Persisting session data, rememberMe =', this.state.rememberMe);\n        const storage = this.state.rememberMe ? localStorage : sessionStorage;\n        const storageType = this.state.rememberMe ? 'localStorage' : 'sessionStorage';\n        storage.setItem(TOKEN_KEY, this.state.token || '');\n        storage.setItem(USER_ID_KEY, this.state.userId || '');\n        storage.setItem(USERNAME_KEY, this.state.username || '');\n        storage.setItem(TOKEN_EXPIRY_KEY, ((_a = this.state.expiresAt) === null || _a === void 0 ? void 0 : _a.toString()) || '');\n        // Always store remember me preference in localStorage\n        localStorage.setItem(REMEMBER_ME_KEY, this.state.rememberMe.toString());\n        console.log(`Auth: Session persisted in ${storageType}`, {\n            token: !!this.state.token,\n            userId: this.state.userId,\n            username: this.state.username\n        });\n    }\n    /**\n     * Schedule token refresh before expiry\n     */\n    scheduleTokenRefresh() {\n        // Clear any existing timeout\n        if (this.refreshTimeout) {\n            window.clearTimeout(this.refreshTimeout);\n            this.refreshTimeout = null;\n        }\n        // If token is set to expire\n        if (this.state.expiresAt) {\n            // Calculate time until refresh (15 minutes before expiry)\n            const refreshTime = this.state.expiresAt - Date.now() - (15 * 60 * 1000);\n            // Schedule refresh\n            if (refreshTime > 0) {\n                this.refreshTimeout = window.setTimeout(() => {\n                    this.refreshToken();\n                }, refreshTime);\n            }\n            else {\n                // Token is about to expire or already expired, refresh immediately\n                this.refreshToken();\n            }\n        }\n    }\n    /**\n     * Refresh auth token\n     */\n    refreshToken() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                // For now, we don't have a token refresh endpoint\n                // This is where you would call the refresh token API\n                // For now, we'll just check token validity and logout if expired\n                if (this.state.expiresAt && this.state.expiresAt < Date.now()) {\n                    console.log('Token expired, logging out');\n                    this.clearSession();\n                    // Redirect to login page if not already there\n                    if (window.location.pathname !== '/login.html') {\n                        window.location.href = '/login.html';\n                    }\n                }\n                else {\n                    // Re-schedule the refresh for the remaining time\n                    this.scheduleTokenRefresh();\n                }\n            }\n            catch (error) {\n                console.error('Failed to refresh token:', error);\n                // If refresh fails, clear session and redirect to login\n                this.clearSession();\n                // Redirect to login page if not already there\n                if (window.location.pathname !== '/login.html') {\n                    window.location.href = '/login.html';\n                }\n            }\n        });\n    }\n    /**\n     * Check token validity when window gains focus\n     */\n    checkTokenValidity() {\n        // If token is expired, clear session and redirect to login\n        if (this.state.expiresAt && this.state.expiresAt < Date.now()) {\n            console.log('Token expired on window focus, logging out');\n            this.clearSession();\n            // Redirect to login page if not already there\n            if (window.location.pathname !== '/login.html') {\n                window.location.href = '/login.html';\n            }\n        }\n    }\n}\n// Create and export auth service instance\nconst authService = new AuthService();\n// Initialize auth service\nauthService.init();\n// Make auth service globally available for legacy code\nif (typeof window !== 'undefined') {\n    window.authService = authService;\n}\n\n\n//# sourceURL=webpack://ft-transcendence-frontend/./src/ts/auth.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/ts/auth.ts"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;