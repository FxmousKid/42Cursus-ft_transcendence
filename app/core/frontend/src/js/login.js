/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/ts/login.ts":
/*!*************************!*\
  !*** ./src/ts/login.ts ***!
  \*************************/
/***/ (function() {

eval("\n// This file will be compiled to JS and included in the HTML directly\n// Global authService will be available from auth.js\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\ndocument.addEventListener('DOMContentLoaded', () => {\n    console.log('Login page loaded');\n    // Get authService from global scope\n    const authService = window.authService;\n    console.log('AuthService available:', !!authService);\n    const loginForm = document.getElementById('login-form');\n    const errorMessage = document.getElementById('error-message');\n    const errorText = document.getElementById('error-text');\n    const rememberMeCheckbox = document.getElementById('remember-me');\n    if (!loginForm) {\n        console.error('Login form not found');\n        return;\n    }\n    // Initialize auth service if available\n    if (authService && authService.init) {\n        console.log('Initializing auth service');\n        authService.init();\n        // Redirect if already logged in\n        if (authService.isAuthenticated && authService.isAuthenticated()) {\n            console.log('User already authenticated, redirecting');\n            window.location.href = '/index.html';\n            return;\n        }\n    }\n    else {\n        console.warn('Auth service not available or missing init method');\n    }\n    // Get redirect URL from query params if present\n    const urlParams = new URLSearchParams(window.location.search);\n    const redirectUrl = urlParams.get('redirect') || '/index.html';\n    // Show success message if coming from registration\n    if (urlParams.has('registered') && urlParams.get('registered') === 'true') {\n        // Create success message element\n        const successMessage = document.createElement('div');\n        successMessage.className = 'bg-green-100 border-l-4 border-green-500 text-green-700 p-4 mb-6 rounded';\n        successMessage.innerHTML = `\n            <div class=\"flex\">\n                <div class=\"flex-shrink-0\">\n                    <svg class=\"h-5 w-5 text-green-500\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                        <path fill-rule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clip-rule=\"evenodd\" />\n                    </svg>\n                </div>\n                <div class=\"ml-3\">\n                    <p class=\"text-sm\">Inscription réussie ! Vous pouvez maintenant vous connecter.</p>\n                </div>\n            </div>\n        `;\n        // Insert registration success message before the form\n        const formContainer = loginForm.parentElement;\n        if (formContainer) {\n            formContainer.insertBefore(successMessage, loginForm);\n        }\n    }\n    // Show redirect message if coming from a protected page\n    if (urlParams.has('redirect') && urlParams.get('redirect') !== '/index.html') {\n        const redirectMessage = document.createElement('div');\n        redirectMessage.className = 'bg-blue-100 border-l-4 border-blue-500 text-blue-700 p-4 mb-6 rounded';\n        redirectMessage.innerHTML = `\n            <div class=\"flex\">\n                <div class=\"flex-shrink-0\">\n                    <svg class=\"h-5 w-5 text-blue-500\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                        <path fill-rule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zm-1 9a1 1 0 01-1-1v-4a1 1 0 112 0v4a1 1 0 01-1 1z\" clip-rule=\"evenodd\" />\n                    </svg>\n                </div>\n                <div class=\"ml-3\">\n                    <p class=\"text-sm\">Veuillez vous connecter pour accéder à la page demandée.</p>\n                </div>\n            </div>\n        `;\n        // Insert redirect message before the form\n        const formContainer = loginForm.parentElement;\n        if (formContainer) {\n            formContainer.insertBefore(redirectMessage, loginForm);\n        }\n    }\n    // Display error function\n    function showError(message) {\n        if (errorText && errorMessage) {\n            errorText.textContent = message;\n            errorMessage.classList.remove('hidden');\n        }\n        else {\n            alert(message);\n        }\n    }\n    loginForm.addEventListener('submit', (event) => __awaiter(void 0, void 0, void 0, function* () {\n        var _a, _b;\n        event.preventDefault();\n        const email = (_a = document.getElementById('email')) === null || _a === void 0 ? void 0 : _a.value;\n        const password = (_b = document.getElementById('password')) === null || _b === void 0 ? void 0 : _b.value;\n        if (!email || !password) {\n            showError('Veuillez remplir tous les champs');\n            return;\n        }\n        const rememberMe = (rememberMeCheckbox === null || rememberMeCheckbox === void 0 ? void 0 : rememberMeCheckbox.checked) || false;\n        try {\n            console.log('Attempting login for:', email);\n            // Show loading state\n            const submitButton = loginForm.querySelector('button[type=\"submit\"]');\n            const originalText = submitButton.innerHTML;\n            submitButton.disabled = true;\n            submitButton.innerHTML = `<svg class=\"animate-spin -ml-1 mr-2 h-5 w-5 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                <circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\"></circle>\n                <path class=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n            </svg><span>Connexion en cours...</span>`;\n            // Check if auth service is available\n            if (!authService || !authService.login) {\n                console.error('Auth service login method not available');\n                showError('Service d\\'authentification non disponible. Veuillez réessayer.');\n                // Reset button\n                submitButton.disabled = false;\n                submitButton.innerHTML = originalText;\n                return;\n            }\n            // Use the auth service instead of direct API call\n            const success = yield authService.login(email, password, rememberMe);\n            console.log('Login success:', success);\n            if (success) {\n                // Redirect to original requested page or home page on successful login\n                window.location.href = redirectUrl;\n            }\n            else {\n                // Show error message\n                showError('Email ou mot de passe incorrect. Veuillez réessayer.');\n                // Reset button\n                submitButton.disabled = false;\n                submitButton.innerHTML = originalText;\n            }\n        }\n        catch (error) {\n            console.error('Error during login:', error);\n            showError('Erreur de connexion au serveur. Veuillez réessayer plus tard.');\n            // Reset button\n            const submitButton = loginForm.querySelector('button[type=\"submit\"]');\n            if (submitButton) {\n                submitButton.disabled = false;\n                submitButton.innerHTML = `<span>Se connecter</span>`;\n            }\n        }\n    }));\n});\n\n\n//# sourceURL=webpack://ft-transcendence-frontend/./src/ts/login.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/ts/login.ts"]();
/******/ 	
/******/ })()
;