/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/ts/profile.ts":
/*!***************************!*\
  !*** ./src/ts/profile.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n/**\n * Script pour gérer la page de profil\n */\ndocument.addEventListener('DOMContentLoaded', () => {\n    console.log('Profile page loaded');\n    // Obtenir l'instance du service d'authentification\n    const authService = window.authService;\n    console.log('Auth service available:', !!authService);\n    // Vérifier l'état d'authentification\n    const isAuthenticated = authService && authService.isAuthenticated && authService.isAuthenticated();\n    console.log('User is authenticated:', isAuthenticated);\n    if (!isAuthenticated) {\n        console.log('User is not authenticated, should be redirected by route-guard.js');\n        return;\n    }\n    // Si l'utilisateur est authentifié, charger les données du profil\n    console.log('Loading profile data for authenticated user');\n    // Remplir les informations de base du profil\n    const profileUsername = authService.getUsername();\n    const userId = authService.getUserId();\n    console.log('Profile data:', { username: profileUsername, userId });\n    const usernameElement = document.getElementById('profile-username');\n    if (usernameElement) {\n        usernameElement.textContent = profileUsername || 'Utilisateur';\n    }\n    // Obtenir l'instance de l'API\n    const api = window.api;\n    const getAvatarUrl = window.getAvatarUrl;\n    if (!api || !api.user) {\n        console.error('API not available');\n        return;\n    }\n    // Profile elements\n    const profileUsernameElement = document.getElementById('profile-username');\n    const profileEmail = document.getElementById('profile-email');\n    const profileStatus = document.getElementById('profile-status');\n    const profileAvatar = document.getElementById('profile-avatar');\n    const avatarUploadInput = document.getElementById('avatar-upload-input');\n    const removeAvatarButton = document.getElementById('remove-avatar-button');\n    // Stats elements\n    const statsGamesPlayed = document.getElementById('stats-games-played');\n    const statsWins = document.getElementById('stats-wins');\n    const statsLosses = document.getElementById('stats-losses');\n    const statsRatio = document.getElementById('stats-ratio');\n    // Matches elements\n    const matchesContainer = document.getElementById('matches-container');\n    const noMatches = document.getElementById('no-matches');\n    const matchTemplate = document.getElementById('match-template');\n    // Edit profile elements\n    const editProfileButton = document.getElementById('edit-profile-button');\n    const editProfileModal = document.getElementById('edit-profile-modal');\n    const editProfileForm = document.getElementById('edit-profile-form');\n    const editUsername = document.getElementById('edit-username');\n    const editEmail = document.getElementById('edit-email');\n    const editAvatar = document.getElementById('edit-avatar');\n    const cancelEditButton = document.getElementById('cancel-edit');\n    const editErrorMessage = document.getElementById('edit-error-message');\n    const editErrorText = document.getElementById('edit-error-text');\n    // Delete account elements\n    const deleteAccountButton = document.getElementById('delete-account-button');\n    const deleteAccountModal = document.getElementById('delete-account-modal');\n    const confirmDeleteButton = document.getElementById('confirm-delete');\n    const cancelDeleteButton = document.getElementById('cancel-delete');\n    const deleteErrorMessage = document.getElementById('delete-error-message');\n    const deleteErrorText = document.getElementById('delete-error-text');\n    // Upload status elements\n    const uploadStatus = document.getElementById('upload-status');\n    const uploadStatusText = document.getElementById('upload-status-text');\n    // Current user data\n    let currentUserData = null;\n    // Utiliser les données du localStorage pour afficher des informations de base\n    // même si le backend n'est pas disponible\n    const username = localStorage.getItem('username');\n    const email = localStorage.getItem('email') || '';\n    const avatarUrl = localStorage.getItem('avatar_url');\n    // Afficher les informations de base depuis localStorage\n    if (username) {\n        profileUsernameElement.textContent = username;\n        profileStatus.textContent = 'offline';\n        profileStatus.classList.add('text-gray-600');\n        // Pré-remplir les champs du formulaire\n        editUsername.value = username;\n        editEmail.value = email;\n        editAvatar.value = avatarUrl || '';\n        // Afficher l'avatar si disponible\n        if (avatarUrl) {\n            updateAvatarDisplay({ id: parseInt(userId), avatar_url: avatarUrl, has_avatar_data: false });\n        }\n    }\n    // Charger les données complètes du profil\n    loadProfileData();\n    // Charger les matchs\n    loadMatches();\n    // Gérer le clic sur l'avatar pour upload\n    if (profileAvatar && avatarUploadInput) {\n        profileAvatar.addEventListener('click', () => {\n            avatarUploadInput.click();\n        });\n        // Gérer la sélection de fichier\n        avatarUploadInput.addEventListener('change', handleAvatarUpload);\n    }\n    // Gérer le bouton de suppression d'avatar\n    if (removeAvatarButton) {\n        removeAvatarButton.addEventListener('click', handleRemoveAvatar);\n    }\n    // Gérer le bouton d'édition de profil\n    if (editProfileButton && editProfileModal) {\n        editProfileButton.addEventListener('click', () => {\n            editProfileModal.classList.remove('hidden');\n        });\n    }\n    if (cancelEditButton && editProfileModal) {\n        cancelEditButton.addEventListener('click', () => {\n            editProfileModal.classList.add('hidden');\n            if (editErrorMessage) {\n                editErrorMessage.classList.add('hidden');\n            }\n        });\n    }\n    if (editProfileForm) {\n        editProfileForm.addEventListener('submit', (e) => {\n            e.preventDefault();\n            submitProfileEdit();\n        });\n    }\n    // Gérer le bouton de suppression de compte\n    if (deleteAccountButton && deleteAccountModal) {\n        deleteAccountButton.addEventListener('click', () => {\n            deleteAccountModal.classList.remove('hidden');\n        });\n    }\n    if (cancelDeleteButton && deleteAccountModal) {\n        cancelDeleteButton.addEventListener('click', () => {\n            deleteAccountModal.classList.add('hidden');\n            if (deleteErrorMessage) {\n                deleteErrorMessage.classList.add('hidden');\n            }\n        });\n    }\n    if (confirmDeleteButton) {\n        confirmDeleteButton.addEventListener('click', () => {\n            deleteAccount();\n        });\n    }\n    // Fonction pour mettre à jour l'affichage de l'avatar\n    function updateAvatarDisplay(userData) {\n        if (!profileAvatar)\n            return;\n        const avatarUrl = getAvatarUrl ? getAvatarUrl(userData) : '';\n        if (avatarUrl) {\n            profileAvatar.innerHTML = `\n                <img src=\"${avatarUrl}\" alt=\"${username}\" class=\"w-full h-full object-cover\">\n                <div class=\"absolute inset-0 bg-black bg-opacity-0 hover:bg-opacity-50 transition-opacity duration-200 flex items-center justify-center cursor-pointer\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-8 w-8 text-white opacity-0 hover:opacity-100 transition-opacity\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z\" />\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 13a3 3 0 11-6 0 3 3 0 016 0z\" />\n                    </svg>\n                </div>\n            `;\n        }\n        else {\n            // Default avatar with upload icon\n            profileAvatar.innerHTML = `\n                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-20 w-20 text-gray-500\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                    <path fill-rule=\"evenodd\" d=\"M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z\" clip-rule=\"evenodd\" />\n                </svg>\n                <div class=\"absolute inset-0 bg-black bg-opacity-0 hover:bg-opacity-50 transition-opacity duration-200 flex items-center justify-center cursor-pointer\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-8 w-8 text-white opacity-0 hover:opacity-100 transition-opacity\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z\" />\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 13a3 3 0 11-6 0 3 3 0 016 0z\" />\n                    </svg>\n                </div>\n            `;\n        }\n        // Show/hide remove button based on whether user has uploaded avatar\n        if (removeAvatarButton) {\n            if (userData.has_avatar_data) {\n                removeAvatarButton.classList.remove('hidden');\n            }\n            else {\n                removeAvatarButton.classList.add('hidden');\n            }\n        }\n    }\n    // Fonction pour gérer l'upload d'avatar\n    function handleAvatarUpload(event) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var _a;\n            const input = event.target;\n            const file = (_a = input.files) === null || _a === void 0 ? void 0 : _a[0];\n            if (!file)\n                return;\n            // Validate file type\n            const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];\n            if (!allowedTypes.includes(file.type)) {\n                showUploadStatus('Type de fichier non supporté. Utilisez JPEG, PNG, GIF ou WebP.', false);\n                return;\n            }\n            // Validate file size (2MB)\n            if (file.size > 2 * 1024 * 1024) {\n                showUploadStatus('Le fichier est trop volumineux. Taille maximale: 2MB.', false);\n                return;\n            }\n            // Show loading state\n            showUploadStatus('Téléchargement en cours...', true, true);\n            try {\n                const response = yield api.user.uploadAvatar(file);\n                if (response.success) {\n                    showUploadStatus('Avatar mis à jour avec succès!', true);\n                    // Reload profile data to get updated avatar info\n                    yield loadProfileData();\n                }\n                else {\n                    showUploadStatus(response.message || 'Erreur lors du téléchargement', false);\n                }\n            }\n            catch (error) {\n                console.error('Error uploading avatar:', error);\n                showUploadStatus('Erreur de connexion au serveur', false);\n            }\n            // Clear the input\n            input.value = '';\n        });\n    }\n    // Fonction pour supprimer l'avatar\n    function handleRemoveAvatar() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!confirm('Êtes-vous sûr de vouloir supprimer votre avatar?')) {\n                return;\n            }\n            showUploadStatus('Suppression en cours...', true, true);\n            try {\n                const response = yield api.user.deleteAvatar();\n                if (response.success) {\n                    showUploadStatus('Avatar supprimé avec succès!', true);\n                    // Reload profile data\n                    yield loadProfileData();\n                }\n                else {\n                    showUploadStatus(response.message || 'Erreur lors de la suppression', false);\n                }\n            }\n            catch (error) {\n                console.error('Error removing avatar:', error);\n                showUploadStatus('Erreur de connexion au serveur', false);\n            }\n        });\n    }\n    // Fonction pour afficher le statut d'upload\n    function showUploadStatus(message, isSuccess, isLoading = false) {\n        if (!uploadStatus || !uploadStatusText)\n            return;\n        uploadStatusText.textContent = message;\n        uploadStatus.classList.remove('hidden', 'bg-green-900/30', 'bg-red-900/30', 'border-green-500', 'border-red-500', 'text-green-300', 'text-red-300');\n        if (isLoading) {\n            uploadStatus.classList.add('bg-blue-900/30', 'border-blue-500', 'text-blue-300');\n        }\n        else if (isSuccess) {\n            uploadStatus.classList.add('bg-green-900/30', 'border-green-500', 'text-green-300');\n        }\n        else {\n            uploadStatus.classList.add('bg-red-900/30', 'border-red-500', 'text-red-300');\n        }\n        // Auto-hide after 3 seconds if not loading\n        if (!isLoading) {\n            setTimeout(() => {\n                uploadStatus.classList.add('hidden');\n            }, 3000);\n        }\n    }\n    // Fonction asynchrone pour charger les données du profil\n    function loadProfileData() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                console.log('Loading full profile data from API');\n                const response = yield api.user.getProfile();\n                console.log('Profile API response:', response);\n                if (response.success && response.data) {\n                    console.log('Successfully loaded profile data');\n                    const profile = response.data;\n                    currentUserData = profile;\n                    // Afficher les informations du profil\n                    profileUsernameElement.textContent = profile.username;\n                    if (profileEmail) {\n                        profileEmail.textContent = profile.email || '';\n                    }\n                    if (profileStatus) {\n                        profileStatus.textContent = profile.status || 'offline';\n                        // Définir la couleur du statut\n                        profileStatus.classList.remove('text-green-600', 'text-blue-600', 'text-gray-600');\n                        if (profile.status === 'online') {\n                            profileStatus.classList.add('text-green-600');\n                        }\n                        else if (profile.status === 'in_game') {\n                            profileStatus.classList.add('text-blue-600');\n                        }\n                        else {\n                            profileStatus.classList.add('text-gray-600');\n                        }\n                    }\n                    // Update avatar display\n                    updateAvatarDisplay(profile);\n                    // Définir les valeurs du formulaire pour l'édition\n                    if (editUsername)\n                        editUsername.value = profile.username;\n                    if (editEmail)\n                        editEmail.value = profile.email || '';\n                    if (editAvatar)\n                        editAvatar.value = profile.avatar_url || '';\n                    // Stocker l'email dans localStorage pour une utilisation future\n                    if (profile.email) {\n                        localStorage.setItem('email', profile.email);\n                    }\n                }\n                else {\n                    console.error('Failed to load profile data:', response.message);\n                }\n            }\n            catch (error) {\n                console.error('Error loading profile data:', error);\n            }\n        });\n    }\n    function loadMatches() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const matchesResponse = yield api.user.getMatches();\n                if (matchesResponse.success && matchesResponse.data && matchesResponse.data.length > 0) {\n                    const matches = matchesResponse.data;\n                    // Hide \"no matches\" message\n                    if (noMatches) {\n                        noMatches.classList.add('hidden');\n                    }\n                    // Calculate stats\n                    let wins = 0;\n                    let losses = 0;\n                    const userId = authService.getUserId();\n                    // Clear existing matches\n                    if (matchesContainer) {\n                        matchesContainer.innerHTML = '';\n                    }\n                    // Display matches\n                    if (matchesContainer && matchTemplate) {\n                        matches.forEach((match) => {\n                            // Determine if current user is player1 or player2\n                            const isPlayer1 = match.player1_id.toString() === userId;\n                            const currentPlayerScore = isPlayer1 ? match.player1_score : match.player2_score;\n                            const opponentScore = isPlayer1 ? match.player2_score : match.player1_score;\n                            const opponentUsername = isPlayer1 ? match.player2_username : match.player1_username;\n                            // Determine if match was won or lost\n                            const isWin = currentPlayerScore > opponentScore;\n                            if (isWin)\n                                wins++;\n                            else\n                                losses++;\n                            // Create match element from template\n                            const matchElement = document.importNode(matchTemplate.content, true);\n                            // Set match details\n                            const resultIndicator = matchElement.querySelector('.match-result-indicator');\n                            const opponent = matchElement.querySelector('.match-opponent');\n                            const date = matchElement.querySelector('.match-date');\n                            const score = matchElement.querySelector('.match-score');\n                            if (resultIndicator) {\n                                resultIndicator.classList.add(isWin ? 'bg-green-500' : 'bg-red-500');\n                            }\n                            if (opponent)\n                                opponent.textContent = opponentUsername || 'Unknown';\n                            if (score)\n                                score.textContent = `${currentPlayerScore} - ${opponentScore}`;\n                            // Format date\n                            if (date && match.created_at) {\n                                const matchDate = new Date(match.created_at);\n                                date.textContent = matchDate.toLocaleDateString();\n                            }\n                            // Add match to container\n                            matchesContainer.appendChild(matchElement);\n                        });\n                    }\n                    // Update stats\n                    const total = wins + losses;\n                    if (statsGamesPlayed)\n                        statsGamesPlayed.textContent = total.toString();\n                    if (statsWins)\n                        statsWins.textContent = wins.toString();\n                    if (statsLosses)\n                        statsLosses.textContent = losses.toString();\n                    if (statsRatio)\n                        statsRatio.textContent = total > 0 ? (wins / total).toFixed(2) : '0.00';\n                }\n                else {\n                    // Show \"no matches\" message if no matches found\n                    if (noMatches) {\n                        noMatches.classList.remove('hidden');\n                    }\n                }\n            }\n            catch (error) {\n                console.error('Error loading matches:', error);\n                // Show \"no matches\" message in case of error\n                if (noMatches) {\n                    noMatches.classList.remove('hidden');\n                }\n            }\n        });\n    }\n    // Fonction pour soumettre les modifications du profil\n    function submitProfileEdit() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!editUsername || !editEmail)\n                return;\n            const updateData = {\n                username: editUsername.value,\n                email: editEmail.value,\n                avatar_url: editAvatar ? editAvatar.value : undefined\n            };\n            try {\n                const response = yield api.user.updateProfile(updateData);\n                if (response.success) {\n                    // Mettre à jour le nom d'utilisateur dans localStorage\n                    if (updateData.username) {\n                        localStorage.setItem('username', updateData.username);\n                        // Mettre à jour l'état dans authService\n                        if (authService && typeof authService.updateUsername === 'function') {\n                            authService.updateUsername(updateData.username);\n                        }\n                    }\n                    // Mettre à jour l'avatar dans localStorage si nécessaire\n                    if (updateData.avatar_url) {\n                        localStorage.setItem('avatar_url', updateData.avatar_url);\n                    }\n                    // Fermer le modal\n                    if (editProfileModal) {\n                        editProfileModal.classList.add('hidden');\n                    }\n                    // Recharger les données du profil\n                    loadProfileData();\n                    // Recharger le header pour refléter les changements\n                    window.location.reload();\n                }\n                else {\n                    // Afficher l'erreur\n                    if (editErrorMessage && editErrorText) {\n                        editErrorText.textContent = response.message || 'Une erreur est survenue';\n                        editErrorMessage.classList.remove('hidden');\n                    }\n                }\n            }\n            catch (error) {\n                console.error('Error updating profile:', error);\n                if (editErrorMessage && editErrorText) {\n                    editErrorText.textContent = 'Erreur de connexion au serveur';\n                    editErrorMessage.classList.remove('hidden');\n                }\n            }\n        });\n    }\n    // Fonction pour supprimer le compte utilisateur\n    function deleteAccount() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                // Montrer l'état de chargement sur le bouton\n                if (confirmDeleteButton) {\n                    confirmDeleteButton.textContent = 'Suppression en cours...';\n                    confirmDeleteButton.disabled = true;\n                }\n                const response = yield api.user.deleteProfile();\n                if (response.success) {\n                    // Déconnexion et redirection vers la page de login\n                    yield authService.logout();\n                    window.location.href = '/login.html';\n                }\n                else {\n                    // Afficher l'erreur\n                    if (deleteErrorMessage && deleteErrorText) {\n                        deleteErrorText.textContent = response.message || 'Une erreur est survenue lors de la suppression du compte';\n                        deleteErrorMessage.classList.remove('hidden');\n                    }\n                    // Réinitialiser le bouton\n                    if (confirmDeleteButton) {\n                        confirmDeleteButton.textContent = 'Confirmer la suppression';\n                        confirmDeleteButton.disabled = false;\n                    }\n                }\n            }\n            catch (error) {\n                console.error('Error deleting account:', error);\n                if (deleteErrorMessage && deleteErrorText) {\n                    deleteErrorText.textContent = 'Erreur de connexion au serveur';\n                    deleteErrorMessage.classList.remove('hidden');\n                }\n                // Réinitialiser le bouton\n                if (confirmDeleteButton) {\n                    confirmDeleteButton.textContent = 'Confirmer la suppression';\n                    confirmDeleteButton.disabled = false;\n                }\n            }\n        });\n    }\n});\n\n\n\n//# sourceURL=webpack://ft-transcendence-frontend/./src/ts/profile.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/ts/profile.ts"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;