/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/ts/friends.ts":
/*!***************************!*\
  !*** ./src/ts/friends.ts ***!
  \***************************/
/***/ (function() {

eval("\n// This file will be compiled to JS and included in the HTML directly\n// Global services and types will be available\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\ndocument.addEventListener('DOMContentLoaded', () => __awaiter(void 0, void 0, void 0, function* () {\n    console.log('Friends page loaded');\n    // Get services from global scope\n    const api = window.api;\n    const websocketService = window.websocketService;\n    console.log('API available:', !!api);\n    console.log('WebSocket service available:', !!websocketService);\n    // Check if API is available\n    if (!api || !api.friendship) {\n        console.error('API or friendship module not available');\n        window.location.href = '/login.html';\n        return;\n    }\n    // Connect to WebSocket if available\n    if (websocketService && websocketService.connect) {\n        console.log('Connecting to WebSocket');\n        websocketService.connect();\n    }\n    // Check if user is logged in\n    const token = localStorage.getItem('auth_token');\n    if (!token) {\n        console.log('No auth token, redirecting to login');\n        window.location.href = '/login.html';\n        return;\n    }\n    // DOM elements\n    const friendsContainer = document.getElementById('friends-container');\n    const noFriends = document.getElementById('no-friends');\n    const friendTemplate = document.getElementById('friend-template');\n    const friendRequestsContainer = document.getElementById('friend-requests-container');\n    const noFriendRequests = document.getElementById('no-friend-requests');\n    const friendRequestTemplate = document.getElementById('friend-request-template');\n    const searchUserForm = document.getElementById('search-user-form');\n    const searchUsername = document.getElementById('search-username');\n    const searchResultsContainer = document.getElementById('search-results-container');\n    const searchResults = document.getElementById('search-results');\n    const searchResultTemplate = document.getElementById('search-result-template');\n    const searchError = document.getElementById('search-error');\n    const searchErrorText = document.getElementById('search-error-text');\n    const friendsSearch = document.getElementById('friends-search');\n    // Register WebSocket event handlers if available\n    if (websocketService && websocketService.onMessage) {\n        websocketService.onMessage('friend-request', (data) => {\n            console.log('Received friend request:', data);\n            loadFriendRequests(); // Refresh requests\n        });\n        websocketService.onMessage('friend-accepted', (data) => {\n            console.log('Friend request accepted:', data);\n            loadFriends(); // Refresh friends list\n        });\n        websocketService.onMessage('friend-status-changed', (data) => {\n            console.log('Friend status changed:', data);\n            updateFriendStatus(data.userId, data.status);\n        });\n    }\n    // Function to update friend status in UI\n    function updateFriendStatus(userId, newStatus) {\n        const friendItem = document.querySelector(`.friend-item[data-id=\"${userId}\"]`);\n        if (!friendItem)\n            return;\n        const statusIndicator = friendItem.querySelector('.friend-status-indicator');\n        const status = friendItem.querySelector('.friend-status');\n        // Remove existing status classes\n        statusIndicator.classList.remove('bg-green-500', 'bg-blue-500', 'bg-gray-500');\n        // Set new status\n        if (newStatus === 'online') {\n            statusIndicator.classList.add('bg-green-500');\n            status.textContent = 'En ligne';\n        }\n        else if (newStatus === 'in_game') {\n            statusIndicator.classList.add('bg-blue-500');\n            status.textContent = 'En jeu';\n        }\n        else {\n            statusIndicator.classList.add('bg-gray-500');\n            status.textContent = 'Hors ligne';\n        }\n    }\n    // Function to load friends list\n    function loadFriends() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const response = yield api.friendship.getFriends();\n                if (response.success && response.data) {\n                    const friends = response.data;\n                    if (friends.length > 0) {\n                        // Hide no friends message\n                        noFriends.classList.add('hidden');\n                        friendsContainer.innerHTML = '';\n                        // Add each friend to the container\n                        friends.forEach((friend) => {\n                            addFriendToUI(friend);\n                        });\n                    }\n                    else {\n                        // Show no friends message\n                        noFriends.classList.remove('hidden');\n                        friendsContainer.innerHTML = '';\n                    }\n                }\n                else {\n                    console.error('Failed to load friends:', response.message);\n                }\n            }\n            catch (error) {\n                console.error('Error loading friends:', error);\n            }\n        });\n    }\n    // Function to add a friend to the UI\n    function addFriendToUI(friend) {\n        const friendElement = document.importNode(friendTemplate.content, true);\n        // Set friend details\n        const username = friendElement.querySelector('.friend-username');\n        const avatar = friendElement.querySelector('.friend-avatar');\n        const statusIndicator = friendElement.querySelector('.friend-status-indicator');\n        const status = friendElement.querySelector('.friend-status');\n        const inviteButton = friendElement.querySelector('.invite-game-button');\n        const removeButton = friendElement.querySelector('.remove-friend-button');\n        // Set username\n        username.textContent = friend.username;\n        // Set avatar if available\n        if (friend.avatar_url) {\n            avatar.innerHTML = `<img src=\"${friend.avatar_url}\" alt=\"${friend.username}\" class=\"w-full h-full object-cover\">`;\n        }\n        // Set status indicator color and text\n        if (friend.status === 'online') {\n            statusIndicator.classList.add('bg-green-500');\n            status.textContent = 'En ligne';\n        }\n        else if (friend.status === 'in_game') {\n            statusIndicator.classList.add('bg-blue-500');\n            status.textContent = 'En jeu';\n        }\n        else {\n            statusIndicator.classList.add('bg-gray-500');\n            status.textContent = 'Hors ligne';\n        }\n        // Add friend ID as data attribute\n        const friendItem = friendElement.querySelector('.friend-item');\n        friendItem.dataset.id = friend.id.toString();\n        // Add event listener to remove button\n        removeButton.addEventListener('click', () => __awaiter(this, void 0, void 0, function* () {\n            try {\n                const response = yield api.friendship.removeFriend(friend.id);\n                if (response.success) {\n                    // Remove friend from UI\n                    const friendElement = document.querySelector(`.friend-item[data-id=\"${friend.id}\"]`);\n                    if (friendElement) {\n                        friendElement.remove();\n                    }\n                    // Check if friends list is empty\n                    if (friendsContainer.children.length === 0) {\n                        noFriends.classList.remove('hidden');\n                    }\n                }\n                else {\n                    console.error('Failed to remove friend:', response.message);\n                }\n            }\n            catch (error) {\n                console.error('Error removing friend:', error);\n            }\n        }));\n        // Add event listener to invite button\n        inviteButton.addEventListener('click', () => {\n            // Send game invitation via API\n            sendGameInvitation(friend.id, friend.username);\n        });\n        // Add to container\n        friendsContainer.appendChild(friendElement);\n    }\n    // Function to send game invitation\n    function sendGameInvitation(friendId, friendUsername) {\n        // Check if websocket available\n        const websocketService = window.websocketService;\n        if (websocketService && websocketService.send) {\n            // Send game invitation via WebSocket\n            websocketService.send('game-invite', {\n                friendId: friendId,\n                friendUsername: friendUsername\n            });\n            alert(`Invitation à jouer envoyée à ${friendUsername}`);\n        }\n        else {\n            // Fallback to API\n            api.game.sendInvitation(friendId)\n                .then((response) => {\n                if (response.success) {\n                    alert(`Invitation à jouer envoyée à ${friendUsername}`);\n                }\n                else {\n                    alert(`Erreur lors de l'envoi de l'invitation: ${response.message}`);\n                }\n            })\n                .catch((error) => {\n                console.error('Error sending game invitation:', error);\n                alert(\"Erreur lors de l'envoi de l'invitation\");\n            });\n        }\n    }\n    // Function to load friend requests\n    function loadFriendRequests() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const response = yield api.friendship.getPendingRequests();\n                if (response.success && response.data) {\n                    const requests = response.data;\n                    if (requests.length > 0) {\n                        // Hide no requests message\n                        noFriendRequests.classList.add('hidden');\n                        friendRequestsContainer.innerHTML = '';\n                        // Add each request to the container\n                        requests.forEach((request) => {\n                            addFriendRequestToUI(request);\n                        });\n                    }\n                    else {\n                        // Show no requests message\n                        noFriendRequests.classList.remove('hidden');\n                        friendRequestsContainer.innerHTML = '';\n                    }\n                }\n                else {\n                    console.error('Failed to load friend requests:', response.message);\n                }\n            }\n            catch (error) {\n                console.error('Error loading friend requests:', error);\n            }\n        });\n    }\n    // Function to add a friend request to the UI\n    function addFriendRequestToUI(request) {\n        if (!request.user)\n            return;\n        const requestElement = document.importNode(friendRequestTemplate.content, true);\n        // Set request details\n        const username = requestElement.querySelector('.request-username');\n        const avatar = requestElement.querySelector('.request-avatar');\n        const date = requestElement.querySelector('.request-date');\n        const acceptButton = requestElement.querySelector('.accept-request-button');\n        const rejectButton = requestElement.querySelector('.reject-request-button');\n        // Set username and date\n        username.textContent = request.user.username;\n        // Format date\n        const requestDate = new Date(request.user.created_at || new Date());\n        date.textContent = `Demande reçue le ${requestDate.toLocaleDateString()}`;\n        // Set avatar if available\n        if (request.user.avatar_url) {\n            avatar.innerHTML = `<img src=\"${request.user.avatar_url}\" alt=\"${request.user.username}\" class=\"w-full h-full object-cover\">`;\n        }\n        // Add request ID as data attribute\n        const requestItem = requestElement.querySelector('.friend-request-item');\n        requestItem.dataset.id = request.id.toString();\n        // Add event listener to accept button\n        acceptButton.addEventListener('click', () => __awaiter(this, void 0, void 0, function* () {\n            try {\n                const response = yield api.friendship.acceptFriendRequest(request.id);\n                if (response.success) {\n                    // Remove request from UI\n                    requestItem.remove();\n                    // Check if requests list is empty\n                    if (friendRequestsContainer.children.length === 0) {\n                        noFriendRequests.classList.remove('hidden');\n                    }\n                    // Reload friends list\n                    loadFriends();\n                }\n                else {\n                    console.error('Failed to accept friend request:', response.message);\n                }\n            }\n            catch (error) {\n                console.error('Error accepting friend request:', error);\n            }\n        }));\n        // Add event listener to reject button\n        rejectButton.addEventListener('click', () => __awaiter(this, void 0, void 0, function* () {\n            try {\n                const response = yield api.friendship.rejectFriendRequest(request.id);\n                if (response.success) {\n                    // Remove request from UI\n                    requestItem.remove();\n                    // Check if requests list is empty\n                    if (friendRequestsContainer.children.length === 0) {\n                        noFriendRequests.classList.remove('hidden');\n                    }\n                }\n                else {\n                    console.error('Failed to reject friend request:', response.message);\n                }\n            }\n            catch (error) {\n                console.error('Error rejecting friend request:', error);\n            }\n        }));\n        // Add to container\n        friendRequestsContainer.appendChild(requestElement);\n    }\n    // Function to search for users\n    function searchUsers(username) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                searchResults.innerHTML = '';\n                if (!username.trim()) {\n                    searchResultsContainer.classList.add('hidden');\n                    return;\n                }\n                // Show loading state\n                searchResults.innerHTML = `\n                <div class=\"text-center py-4\">\n                    <svg class=\"animate-spin h-8 w-8 mx-auto text-blue-600\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                        <circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\"></circle>\n                        <path class=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                    </svg>\n                </div>\n            `;\n                searchResultsContainer.classList.remove('hidden');\n                // Search users via API\n                const response = yield api.user.searchUsers(username);\n                if (response.success) {\n                    const data = response.data;\n                    searchResults.innerHTML = '';\n                    if (data.length > 0) {\n                        data.forEach((user) => {\n                            addSearchResultToUI(user);\n                        });\n                    }\n                    else {\n                        searchResults.innerHTML = `\n                        <div class=\"text-center py-4 text-gray-500\">\n                            Aucun utilisateur trouvé pour \"${username}\"\n                        </div>\n                    `;\n                    }\n                }\n                else {\n                    throw new Error(response.message || 'Failed to search users');\n                }\n            }\n            catch (error) {\n                console.error('Error searching users:', error);\n                searchError.classList.remove('hidden');\n                searchErrorText.textContent = 'Erreur lors de la recherche. Veuillez réessayer.';\n                // Hide error after 3 seconds\n                setTimeout(() => {\n                    searchError.classList.add('hidden');\n                }, 3000);\n            }\n        });\n    }\n    // Function to add a search result to the UI\n    function addSearchResultToUI(user) {\n        const resultElement = document.importNode(searchResultTemplate.content, true);\n        // Set user details\n        const username = resultElement.querySelector('.result-username');\n        const avatar = resultElement.querySelector('.result-avatar');\n        const addButton = resultElement.querySelector('.add-friend-button');\n        // Set username\n        username.textContent = user.username;\n        // Set avatar if available\n        if (user.avatar_url) {\n            avatar.innerHTML = `<img src=\"${user.avatar_url}\" alt=\"${user.username}\" class=\"w-full h-full object-cover\">`;\n        }\n        // Add user ID as data attribute\n        const resultItem = resultElement.querySelector('.search-result-item');\n        resultItem.dataset.id = user.id.toString();\n        // Add event listener to add button\n        addButton.addEventListener('click', () => __awaiter(this, void 0, void 0, function* () {\n            try {\n                // Disable button to prevent multiple clicks\n                addButton.disabled = true;\n                addButton.innerHTML = `\n                    <svg class=\"animate-spin h-5 w-5 mx-auto\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                        <circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\"></circle>\n                        <path class=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                    </svg>\n                `;\n                // Send friend request via API\n                const response = yield api.friendship.sendFriendRequest(user.id);\n                if (response.success) {\n                    // Update button to show success\n                    addButton.innerHTML = `\n                        <svg class=\"h-5 w-5 text-green-500\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                            <path fill-rule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clip-rule=\"evenodd\" />\n                        </svg>\n                    `;\n                    addButton.classList.remove('bg-blue-600', 'hover:bg-blue-700');\n                    addButton.classList.add('bg-gray-300', 'cursor-not-allowed');\n                }\n                else {\n                    // Reset button and show error\n                    addButton.disabled = false;\n                    addButton.innerHTML = `<span>Ajouter</span>`;\n                    throw new Error(response.message || 'Failed to send friend request');\n                }\n            }\n            catch (error) {\n                console.error('Error sending friend request:', error);\n                // Show error message\n                searchError.classList.remove('hidden');\n                searchErrorText.textContent = 'Erreur lors de l\\'envoi de la demande d\\'ami.';\n                // Hide error after 3 seconds\n                setTimeout(() => {\n                    searchError.classList.add('hidden');\n                }, 3000);\n            }\n        }));\n        // Add to container\n        searchResults.appendChild(resultElement);\n    }\n    // Event listener for search form submission\n    if (searchUserForm) {\n        searchUserForm.addEventListener('submit', (e) => {\n            e.preventDefault();\n            searchUsers(searchUsername.value);\n        });\n    }\n    // Event listener for friends search input\n    if (friendsSearch) {\n        friendsSearch.addEventListener('input', () => {\n            const query = friendsSearch.value.toLowerCase();\n            const friendItems = friendsContainer.querySelectorAll('.friend-item');\n            friendItems.forEach((item) => {\n                var _a, _b;\n                const username = ((_b = (_a = item.querySelector('.friend-username')) === null || _a === void 0 ? void 0 : _a.textContent) === null || _b === void 0 ? void 0 : _b.toLowerCase()) || '';\n                if (username.includes(query)) {\n                    item.style.display = '';\n                }\n                else {\n                    item.style.display = 'none';\n                }\n            });\n            // Show \"no results\" message if all friends are hidden\n            let allHidden = true;\n            friendItems.forEach((item) => {\n                if (item.style.display !== 'none') {\n                    allHidden = false;\n                }\n            });\n            if (allHidden && friendItems.length > 0) {\n                // Create or update no results message\n                let noResults = document.getElementById('no-search-results');\n                if (!noResults) {\n                    noResults = document.createElement('div');\n                    noResults.id = 'no-search-results';\n                    noResults.className = 'text-center py-4 text-gray-500';\n                    noResults.textContent = `Aucun ami trouvé pour \"${query}\"`;\n                    friendsContainer.appendChild(noResults);\n                }\n                else {\n                    noResults.textContent = `Aucun ami trouvé pour \"${query}\"`;\n                    noResults.classList.remove('hidden');\n                }\n            }\n            else {\n                // Hide no results message if it exists\n                const noResults = document.getElementById('no-search-results');\n                if (noResults) {\n                    noResults.classList.add('hidden');\n                }\n            }\n        });\n    }\n    // Initial loading\n    loadFriends();\n    loadFriendRequests();\n}));\n\n\n//# sourceURL=webpack://ft-transcendence-frontend/./src/ts/friends.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/ts/friends.ts"]();
/******/ 	
/******/ })()
;