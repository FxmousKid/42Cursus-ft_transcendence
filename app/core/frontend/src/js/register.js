/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/ts/register.ts":
/*!****************************!*\
  !*** ./src/ts/register.ts ***!
  \****************************/
/***/ (function() {

eval("\n// This file will be compiled to JS and included in the HTML directly\n// Global authService will be available from auth.js\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\ndocument.addEventListener('DOMContentLoaded', () => {\n    console.log('Register page loaded');\n    // Get authService from global scope\n    const authService = window.authService;\n    console.log('AuthService available:', !!authService);\n    const registerForm = document.getElementById('register-form');\n    const errorMessage = document.getElementById('error-message');\n    const errorText = document.getElementById('error-text');\n    if (!registerForm) {\n        console.error('Register form not found');\n        return;\n    }\n    // Initialize auth service if available\n    if (authService && authService.init) {\n        console.log('Initializing auth service');\n        authService.init();\n        // Redirect if already logged in\n        if (authService.isAuthenticated && authService.isAuthenticated()) {\n            console.log('User already authenticated, redirecting');\n            window.location.href = '/index.html';\n            return;\n        }\n    }\n    else {\n        console.warn('Auth service not available or missing init method');\n    }\n    // Display error function\n    function showError(message) {\n        if (errorText && errorMessage) {\n            errorText.textContent = message;\n            errorMessage.classList.remove('hidden');\n        }\n        else {\n            alert(message);\n        }\n    }\n    registerForm.addEventListener('submit', (event) => __awaiter(void 0, void 0, void 0, function* () {\n        var _a, _b, _c, _d;\n        event.preventDefault();\n        // Clear previous error\n        if (errorMessage) {\n            errorMessage.classList.add('hidden');\n        }\n        // Get form values\n        const username = (_a = document.getElementById('username')) === null || _a === void 0 ? void 0 : _a.value;\n        const email = (_b = document.getElementById('email')) === null || _b === void 0 ? void 0 : _b.value;\n        const password = (_c = document.getElementById('password')) === null || _c === void 0 ? void 0 : _c.value;\n        const confirmPassword = (_d = document.getElementById('confirm-password')) === null || _d === void 0 ? void 0 : _d.value;\n        // Field validation\n        if (!username || !email || !password || !confirmPassword) {\n            showError('Veuillez remplir tous les champs');\n            return;\n        }\n        if (password !== confirmPassword) {\n            showError('Les mots de passe ne correspondent pas');\n            return;\n        }\n        if (password.length < 8) {\n            showError('Le mot de passe doit comporter au moins 8 caractères');\n            return;\n        }\n        try {\n            console.log('Attempting registration for:', email);\n            // Show loading state\n            const submitButton = registerForm.querySelector('button[type=\"submit\"]');\n            const originalText = submitButton.innerHTML;\n            submitButton.disabled = true;\n            submitButton.innerHTML = `<svg class=\"animate-spin -ml-1 mr-2 h-5 w-5 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                <circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\"></circle>\n                <path class=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n            </svg><span>Inscription en cours...</span>`;\n            // Check if auth service is available\n            if (!authService || !authService.register) {\n                console.error('Auth service register method not available');\n                showError('Service d\\'authentification non disponible. Veuillez réessayer.');\n                // Reset button\n                submitButton.disabled = false;\n                submitButton.innerHTML = originalText;\n                return;\n            }\n            // Use the auth service instead of direct API call\n            const success = yield authService.register(username, email, password);\n            console.log('Registration success:', success);\n            if (success) {\n                // Redirect to login page with success message\n                window.location.href = '/login.html?registered=true';\n            }\n            else {\n                // Show generic error message\n                showError('Erreur lors de l\\'inscription. Veuillez réessayer.');\n                // Reset button\n                submitButton.disabled = false;\n                submitButton.innerHTML = originalText;\n            }\n        }\n        catch (error) {\n            console.error('Error during registration:', error);\n            // Determine error message based on error response\n            let errorMsg = 'Erreur lors de l\\'inscription. Veuillez réessayer.';\n            if (error.message) {\n                if (error.message.includes('email already exists')) {\n                    errorMsg = 'Cet email est déjà utilisé.';\n                }\n                else if (error.message.includes('username already exists')) {\n                    errorMsg = 'Ce nom d\\'utilisateur est déjà pris.';\n                }\n            }\n            showError(errorMsg);\n            // Reset button\n            const submitButton = registerForm.querySelector('button[type=\"submit\"]');\n            if (submitButton) {\n                submitButton.disabled = false;\n                submitButton.innerHTML = `<span>S'inscrire</span>`;\n            }\n        }\n    }));\n});\n\n\n//# sourceURL=webpack://ft-transcendence-frontend/./src/ts/register.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/ts/register.ts"]();
/******/ 	
/******/ })()
;