const WebSocket = require('ws');
const fetch = require('node-fetch');

// Configuration
const API_BASE_URL = 'http://localhost:3000';
const WS_URL = 'ws://localhost:3000/ws';
let authToken = null;
let userId = null;

// Test de la connexion WebSocket
async function testWebSocketConnection() {
  console.log('üîå D√©marrage des tests WebSocket...\n');
  
  // D'abord obtenir un token d'authentification
  try {
    console.log('üß™ Authentification pr√©alable');
    
    const response = await fetch(`${API_BASE_URL}/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        email: 'test@example.com',
        password: 'Password123!'
      })
    });
    
    const data = await response.json();
    
    if (data.success) {
      authToken = data.data.token;
      userId = data.data.id;
      console.log(`  ‚úì Token obtenu: ${authToken.substring(0, 15)}...`);
      console.log(`  ‚úì ID utilisateur: ${userId}`);
    } else {
      throw new Error('√âchec de l\'authentification');
    }
  } catch (error) {
    console.error(`  ‚ùå √âchec de l'authentification: ${error.message}`);
    return;
  }
  
  // Test 1: √âtablir une connexion WebSocket
  try {
    console.log('\nüß™ Test 1: √âtablissement d\'une connexion WebSocket');
    
    const ws = new WebSocket(WS_URL, {
      headers: {
        Authorization: `Bearer ${authToken}`
      }
    });
    
    let connectionOpened = false;
    
    // √âv√©nement d'ouverture de connexion
    ws.on('open', () => {
      connectionOpened = true;
      console.log('  ‚úì Connexion WebSocket √©tablie');
      
      // Envoi d'un message de ping
      ws.send(JSON.stringify({
        type: 'ping',
        data: {
          message: 'Ping test'
        }
      }));
      
      console.log('  ‚úì Message ping envoy√©');
    });
    
    // √âv√©nement de r√©ception de message
    ws.on('message', (message) => {
      try {
        const data = JSON.parse(message);
        console.log(`  ‚úì Message re√ßu: ${message}`);
        console.log(`  ‚úì Type: ${data.type}`);
        
        // D√©connexion apr√®s avoir re√ßu un message
        setTimeout(() => {
          ws.close();
          console.log('  ‚úì Connexion WebSocket ferm√©e');
        }, 1000);
      } catch (error) {
        console.error(`  ‚ùå Erreur de parsing du message: ${error.message}`);
      }
    });
    
    // √âv√©nement d'erreur
    ws.on('error', (error) => {
      console.error(`  ‚ùå Erreur WebSocket: ${error.message}`);
    });
    
    // √âv√©nement de fermeture
    ws.on('close', (code, reason) => {
      console.log(`  ‚úì Connexion ferm√©e avec le code: ${code}, raison: ${reason || 'Aucune'}`);
      
      if (connectionOpened) {
        console.log('  ‚úÖ Test 1 r√©ussi');
      } else {
        console.error('  ‚ùå Test 1 √©chou√©: La connexion n\'a pas pu √™tre √©tablie');
      }
      
      // Fin du test global
      console.log('\n‚ú® Tests WebSocket termin√©s!');
    });
    
    // Timeout pour s'assurer que le test ne reste pas bloqu√©
    setTimeout(() => {
      if (ws.readyState === WebSocket.OPEN) {
        console.log('  ‚ö†Ô∏è Fermeture de la connexion apr√®s timeout');
        ws.close();
      }
    }, 10000);
    
  } catch (error) {
    console.error(`  ‚ùå Test 1 √©chou√©: ${error.message}`);
  }
}

// Ex√©cuter le test
testWebSocketConnection().catch(console.error); 