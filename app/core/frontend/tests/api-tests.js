const fetch = require('node-fetch');

// Configuration
const API_BASE_URL = 'http://localhost:3000';
let authToken = null;
let userId = null;

// Fonction utilitaire pour les appels API
async function callApi(endpoint, method = 'GET', body = null, token = null) {
  const headers = {
    'Content-Type': 'application/json',
  };
  
  if (token) {
    headers['Authorization'] = `Bearer ${token}`;
  }
  
  const options = {
    method,
    headers,
  };
  
  if (body && (method === 'POST' || method === 'PUT')) {
    options.body = JSON.stringify(body);
  }
  
  try {
    const response = await fetch(`${API_BASE_URL}${endpoint}`, options);
    const data = await response.json();
    return { status: response.status, data };
  } catch (error) {
    console.error(`Erreur lors de l'appel API √† ${endpoint}:`, error);
    return { status: 500, data: { success: false, message: error.message } };
  }
}

// Tests des fonctionnalit√©s API
async function runApiTests() {
  console.log('üîç D√©marrage des tests API...\n');
  
  // Test 1: Inscription d'un utilisateur
  try {
    console.log('üß™ Test 1: Inscription d\'un utilisateur');
    
    const username = `testapi_${Math.floor(Math.random() * 10000)}`;
    const email = `${username}@example.com`;
    const password = 'Password123!';
    
    const registerResponse = await callApi('/auth/register', 'POST', {
      username,
      email,
      password
    });
    
    console.log(`  ‚úì Statut de la r√©ponse: ${registerResponse.status}`);
    console.log(`  ‚úì Succ√®s: ${registerResponse.data.success}`);
    console.log(`  ‚úì Compte cr√©√© pour: ${registerResponse.data.data?.username}`);
    
    if (registerResponse.data.success) {
      authToken = registerResponse.data.data.token;
      userId = registerResponse.data.data.id;
      console.log(`  ‚úì Token obtenu: ${authToken.substring(0, 15)}...`);
      console.log(`  ‚úì ID utilisateur: ${userId}`);
    }
    
    console.log('  ‚úÖ Test 1 r√©ussi');
  } catch (error) {
    console.error(`  ‚ùå Test 1 √©chou√©: ${error.message}`);
  }
  
  // Test 2: Connexion
  try {
    console.log('\nüß™ Test 2: Connexion avec un compte existant');
    
    const loginResponse = await callApi('/auth/login', 'POST', {
      email: 'test@example.com',
      password: 'Password123!'
    });
    
    console.log(`  ‚úì Statut de la r√©ponse: ${loginResponse.status}`);
    console.log(`  ‚úì Succ√®s: ${loginResponse.data.success}`);
    
    if (loginResponse.data.success) {
      authToken = loginResponse.data.data.token;
      userId = loginResponse.data.data.id;
      console.log(`  ‚úì Token obtenu: ${authToken.substring(0, 15)}...`);
      console.log(`  ‚úì ID utilisateur: ${userId}`);
    }
    
    console.log('  ‚úÖ Test 2 r√©ussi');
  } catch (error) {
    console.error(`  ‚ùå Test 2 √©chou√©: ${error.message}`);
  }
  
  // Test 3: R√©cup√©ration du profil
  try {
    console.log('\nüß™ Test 3: R√©cup√©ration du profil utilisateur');
    
    const profileResponse = await callApi('/users/profile', 'GET', null, authToken);
    
    console.log(`  ‚úì Statut de la r√©ponse: ${profileResponse.status}`);
    console.log(`  ‚úì Succ√®s: ${profileResponse.data.success}`);
    
    if (profileResponse.data.success) {
      console.log(`  ‚úì Profil r√©cup√©r√© pour: ${profileResponse.data.data.username}`);
      console.log(`  ‚úì Email: ${profileResponse.data.data.email}`);
      console.log(`  ‚úì Statut: ${profileResponse.data.data.status}`);
    }
    
    console.log('  ‚úÖ Test 3 r√©ussi');
  } catch (error) {
    console.error(`  ‚ùå Test 3 √©chou√©: ${error.message}`);
  }
  
  // Test 4: Mise √† jour du profil
  try {
    console.log('\nüß™ Test 4: Mise √† jour du profil utilisateur');
    
    const updateResponse = await callApi('/users/profile', 'PUT', {
      username: `updated_${Math.floor(Math.random() * 1000)}`,
      avatar_url: 'https://example.com/avatar.jpg'
    }, authToken);
    
    console.log(`  ‚úì Statut de la r√©ponse: ${updateResponse.status}`);
    console.log(`  ‚úì Succ√®s: ${updateResponse.data.success}`);
    
    if (updateResponse.data.success) {
      console.log(`  ‚úì Profil mis √† jour pour: ${updateResponse.data.data.username}`);
      console.log(`  ‚úì Nouvelle URL avatar: ${updateResponse.data.data.avatar_url}`);
    }
    
    console.log('  ‚úÖ Test 4 r√©ussi');
  } catch (error) {
    console.error(`  ‚ùå Test 4 √©chou√©: ${error.message}`);
  }
  
  // Test 5: Liste des utilisateurs
  try {
    console.log('\nüß™ Test 5: R√©cup√©ration de la liste des utilisateurs');
    
    const usersResponse = await callApi('/users', 'GET', null, authToken);
    
    console.log(`  ‚úì Statut de la r√©ponse: ${usersResponse.status}`);
    console.log(`  ‚úì Succ√®s: ${usersResponse.data.success}`);
    
    if (usersResponse.data.success) {
      console.log(`  ‚úì Nombre d'utilisateurs: ${usersResponse.data.data.length}`);
      const usernames = usersResponse.data.data.map(user => user.username).join(', ');
      console.log(`  ‚úì Utilisateurs: ${usernames}`);
    }
    
    console.log('  ‚úÖ Test 5 r√©ussi');
  } catch (error) {
    console.error(`  ‚ùå Test 5 √©chou√©: ${error.message}`);
  }
  
  // Test 6: Liste des amis et demandes d'amiti√©
  try {
    console.log('\nüß™ Test 6: R√©cup√©ration des amis et demandes d\'amiti√©');
    
    const friendsResponse = await callApi('/friendships', 'GET', null, authToken);
    
    console.log(`  ‚úì Statut de la r√©ponse: ${friendsResponse.status}`);
    console.log(`  ‚úì Succ√®s: ${friendsResponse.data.success}`);
    
    if (friendsResponse.data.success) {
      console.log(`  ‚úì Nombre d'amis: ${friendsResponse.data.data.length}`);
      
      if (friendsResponse.data.data.length > 0) {
        const friendUsernames = friendsResponse.data.data.map(friend => friend.username).join(', ');
        console.log(`  ‚úì Amis: ${friendUsernames}`);
      }
    }
    
    // V√©rifier les demandes d'amiti√©
    const requestsResponse = await callApi('/friendships/requests', 'GET', null, authToken);
    
    console.log(`  ‚úì Statut de la r√©ponse des demandes: ${requestsResponse.status}`);
    console.log(`  ‚úì Succ√®s des demandes: ${requestsResponse.data.success}`);
    
    if (requestsResponse.data.success) {
      console.log(`  ‚úì Nombre de demandes: ${requestsResponse.data.data.length}`);
    }
    
    console.log('  ‚úÖ Test 6 r√©ussi');
  } catch (error) {
    console.error(`  ‚ùå Test 6 √©chou√©: ${error.message}`);
  }
  
  // Test 7: D√©connexion
  try {
    console.log('\nüß™ Test 7: D√©connexion');
    
    const logoutResponse = await callApi('/auth/logout', 'POST', null, authToken);
    
    console.log(`  ‚úì Statut de la r√©ponse: ${logoutResponse.status}`);
    console.log(`  ‚úì Succ√®s: ${logoutResponse.data.success}`);
    
    if (logoutResponse.data.success) {
      console.log(`  ‚úì Message: ${logoutResponse.data.message}`);
      // R√©initialiser le token
      authToken = null;
    }
    
    console.log('  ‚úÖ Test 7 r√©ussi');
  } catch (error) {
    console.error(`  ‚ùå Test 7 √©chou√©: ${error.message}`);
  }
  
  console.log('\n‚ú® Tests API termin√©s!');
}

// Ex√©cuter les tests
runApiTests().catch(console.error); 