import { ethers } from "hardhat";
import * as fs from 'fs';
import * as path from 'path';

async function main() {
  console.log("üöÄ D√©ploiement du smart contract TournamentScores sur Avalanche...");

  // 1. R√©cup√©rer le compte qui d√©ploie
  const [deployer] = await ethers.getSigners();
  console.log("üìù D√©ploiement avec le compte:", deployer.address);

  // 2. V√©rifier le solde (pour payer les gas fees)
  const balance = await deployer.provider.getBalance(deployer.address);
  console.log("üí∞ Solde du compte:", ethers.formatEther(balance), "AVAX");

  if (balance === 0n) {
    console.log("‚ö†Ô∏è  ATTENTION: Solde insuffisant!");
    console.log("üîó Pour obtenir des AVAX de test:");
    console.log("   1. Allez sur https://faucet.avax.network/");
    console.log("   2. S√©lectionnez 'Fuji Testnet'");
    console.log("   3. Entrez votre adresse:", deployer.address);
    console.log("   4. Demandez des tokens de test");
    return;
  }

  // 3. D√©ployer le contrat
  console.log("üì¶ Compilation et d√©ploiement du contrat...");
  const TournamentScores = await ethers.getContractFactory("TournamentScores");
  const tournamentScores = await TournamentScores.deploy();

  // 4. Attendre la confirmation
  await tournamentScores.waitForDeployment();
  const contractAddress = await tournamentScores.getAddress();

  console.log("‚úÖ Contrat d√©ploy√© avec succ√®s!");
  console.log("üìç Adresse du contrat:", contractAddress);
  console.log("üîó Voir sur l'explorateur:", `https://testnet.snowtrace.io/address/${contractAddress}`);

  // 5. V√©rifier que le d√©ployeur est autoris√©
  const isAuthorized = await tournamentScores.authorizedRecorders(deployer.address);
  console.log("üîê D√©ployeur autoris√©:", isAuthorized);

  // 6. Sauvegarder les informations de d√©ploiement
  const deploymentInfo = {
    contractAddress: contractAddress,
    deployerAddress: deployer.address,
    network: await deployer.provider.getNetwork(),
    deploymentTime: new Date().toISOString(),
    transactionHash: tournamentScores.deploymentTransaction()?.hash
  };

  // Cr√©er le dossier deployments s'il n'existe pas
  const deploymentsDir = path.join(__dirname, '../deployments');
  if (!fs.existsSync(deploymentsDir)) {
    fs.mkdirSync(deploymentsDir, { recursive: true });
  }

  // Sauvegarder les infos
  const deploymentFile = path.join(deploymentsDir, 'tournament-scores.json');
  fs.writeFileSync(deploymentFile, JSON.stringify(deploymentInfo, null, 2));
  console.log("üíæ Informations sauvegard√©es dans:", deploymentFile);

  // 7. Instructions pour la suite
  console.log("\nüéØ PROCHAINES √âTAPES:");
  console.log("1. Copiez cette adresse dans votre .env:");
  console.log(`   TOURNAMENT_CONTRACT_ADDRESS=${contractAddress}`);
  console.log("\n2. Ajoutez votre cl√© priv√©e dans .env:");
  console.log(`   BLOCKCHAIN_PRIVATE_KEY=votre_cl√©_priv√©e`);
  console.log("\n3. Red√©marrez votre backend pour activer la blockchain");
  console.log("\n4. Testez avec un match de tournoi!");

  // 8. Test rapide du contrat
  console.log("\nüß™ Test rapide du contrat...");
  try {
    const matchCount = await tournamentScores.getTournamentMatchCount(1);
    console.log("‚úÖ Contrat fonctionnel! Matchs dans tournoi 1:", matchCount.toString());
  } catch (error) {
    console.log("‚ùå Erreur lors du test:", error);
  }
}

// Gestion des erreurs
main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("‚ùå Erreur lors du d√©ploiement:", error);
    process.exit(1);
  }); 